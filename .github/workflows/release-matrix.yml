name: Build (Win/Mac/Linux) and Release

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

concurrency:
  group: release-${{ github.ref }}
  cancel-in-progress: true

permissions:
  contents: write

env:
  # Подставляем значения из Settings → Actions → Variables/Secrets
  BACKEND_BASE_URL: ${{ vars.BACKEND_BASE_URL }}
  INSTALL_DIR_NAME: ${{ vars.INSTALL_DIR_NAME }}
  APP_KEY: ${{ secrets.APP_KEY }}
  CSC_IDENTITY_AUTO_DISCOVERY: 'false'
  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  prepare:
    name: Prepare (fast checks)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Check version
        run: |
          echo "Version: $(jq -r .version package.json)"
      - name: Dry-run release check
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          TAG=v$(jq -r .version package.json)
          echo "Tag: $TAG"
          gh release view "$TAG" --repo "$GITHUB_REPOSITORY" >/dev/null 2>&1 || echo "Release $TAG will be created"

  build:
    name: Build ${{ matrix.name }}
    needs: prepare
    defaults:
      run:
        shell: bash
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            name: Windows
            target: '--win nsis portable --x64'
            artifact: artifacts-win
          - os: macos-latest
            name: macOS (arm64)
            target: '--mac dmg zip --arm64'
            artifact: artifacts-mac-arm64
          - os: macos-latest
            name: macOS (x64)
            target: '--mac dmg zip --x64'
            artifact: artifacts-mac-x64
          - os: ubuntu-latest
            name: Linux
            target: '--linux AppImage --x64'
            artifact: artifacts-linux
    runs-on: ${{ matrix.os }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
          cache-dependency-path: package-lock.json

      - name: Install deps
        run: npm ci

      - name: Build (vite + electron)
        run: npm run build

      - name: Package ${{ matrix.name }} (${{ matrix.target }})
        run: npx electron-builder ${{ matrix.target }} -p never

      - name: List dist
        run: |
          echo "Dist:" && ls -al dist || true

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: ${{ matrix.artifact }}
          path: |
            dist/**
          if-no-files-found: error

  release:
    name: Create GitHub Release
    needs: [prepare, build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Checkout repo (for package.json & gh defaults)
        uses: actions/checkout@v4
      - name: Download artifacts (win)
        uses: actions/download-artifact@v4
        with:
          name: artifacts-win
          path: downloaded/win
        continue-on-error: true

      - name: Download artifacts (mac arm64)
        uses: actions/download-artifact@v4
        with:
          name: artifacts-mac-arm64
          path: downloaded/mac-arm64
        continue-on-error: true

      - name: Download artifacts (mac x64)
        uses: actions/download-artifact@v4
        with:
          name: artifacts-mac-x64
          path: downloaded/mac-x64
        continue-on-error: true

      - name: Download artifacts (linux)
        uses: actions/download-artifact@v4
        with:
          name: artifacts-linux
          path: downloaded/linux
        continue-on-error: true

      - name: Read version from package.json
        id: pkg
        run: echo "version=$(jq -r .version package.json)" >> "$GITHUB_OUTPUT"

      - name: Ensure release exists (idempotent)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          TAG=v${{ steps.pkg.outputs.version }}
          # create if not exists, else update title
          if ! gh release view "$TAG" --repo "$GITHUB_REPOSITORY" >/dev/null 2>&1; then
            gh release create "$TAG" -t "$TAG" -n "Automated release $TAG" --repo "$GITHUB_REPOSITORY"
          else
            gh release edit "$TAG" -t "$TAG" -n "Automated release $TAG" --repo "$GITHUB_REPOSITORY"
          fi

      - name: Upload assets via gh CLI (handles spaces)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          set -e
          TAG=v${{ steps.pkg.outputs.version }}
          # Build a bash array with null-delimited filenames to preserve spaces
          mapfile -d '' files < <(find downloaded -type f \
            \( -name "*.exe" -o -name "*.dmg" -o -name "*.zip" -o -name "*.AppImage" \
               -o -name "*.blockmap" -o -name "*.yml" -o -name "*.zsync" \) -print0)
          echo "Found ${#files[@]} files to upload"
          if (( ${#files[@]} > 0 )); then
            gh release upload "$TAG" "${files[@]}" --clobber --repo "$GITHUB_REPOSITORY"
          else
            echo "No files found to upload"
          fi

